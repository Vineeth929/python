(example-1):
class love:
    name='druthi'
    address='vizag'
print(love.name)
print(love.address)
(example-2):
class addition:
    a=22
    b=18
print('first number=',addition.a)
print('second number=',addition.b)
print('result=',addition.a+addition.b)
(example-3):
class love:
    def f1():
        print('get a good job')
    def f2():
        print('marry your love')
love.f1()
love.f2()
(example-4):
class addition:
    def read():
       addition.a=int(input('enter first number'))
       addition.b=int(input('enter second number'))
    def calculate():
              addition.c=addition.a+addition.b
    def display():
              print('display the result')
              print('first number=',addition.a)
              print('second number=',addition.b)
              print('result=',addition.c)
addition.read()
addition.calculate()
addition.display()
(example-5):
class rectangle:
    def read():
        rectangle.l=int(input('enter length value'))
        rectangle.b=int(input('enter breadth value'))
    def find():
        rectangle.area=rectangle.l*rectangle.b
    def display():
        print('area of rectangle=',rectangle.area)
rectangle.read()
rectangle.find()
rectangle.display()
(example-6):
class circle:
    def read():
        circle.r=int(input('enter radius value'))
    def find():
        circle.area=3.14*circle.r*circle.r
    def display():
        print('area of circle=',circle.area)
circle.read()
circle.find()
circle.display()
(______________"declare a object"_____________________)
(example-1):
class sample:
    def f1(self):
        print('tesla is a electric car')
    def f2(self):
        print('get a job in elonmusk company')
s1=sample()
s1.f1()
s1.f2()
(example-2)
class test():
    def m1(self):
        print('python is a higher language')
    def m2(self):
        print('live a happy life')
t1=test()
t1.m1()
t1.m2()
t2=test()
t2.m1()
t2.m2()
t3=test()
t3.m1()
t3.m2()
t4=test()
t4.m1()
t4.m2()
t5=test()
t5.m1()
t5.m2()
______("creating a object")_______
(example-1):
class person:
    def read(x):
        x.name=input('enter a person name')
        x.age=int(input('enter a person age'))
    def display(x):
        print('name of person=',x.name)
        print('age of person=',x.age)
p1=person()
p1.read()
p1.display()
(_______"the self parameter"_______)
(example-1):
class sample:
    def m1(self):
        print('i love india')
s1=sample()
s1.m1()
print(type(s1))
_______(_init_)______
(example-1)
class sample:
    def __init__(self):
        print('never ever give up')
s=sample()
(example-2)
class test:
    def __init__(self):
        self.a=22
        self.b=18
    def calculate(self):
        print(self.a+self.b)
        print(self.a-self.b)
        print(self.a*self.b)
        print(self.a%self.b)
t1=test()
t1.calculate()
(default constructors):
(example-1):
class person:
    def __init__(self):
        self.name=input('enter a name of the person')
        self.age=int(input('enter a age of the person'))
    def display(self):
        print('name of the person=',self.name)
        print('age of the person=',self.age)
p=person()
p.display()
(parametirized constructors):
(example-1):
class person:
    def __init__(self,x,y):
        self.name=x
        self.age=y
    def display(self):
        print('name of the person=',self.name)
        print('age of the person=',self.age)
p1=person('vineeth',22)
p1.display()
(example-2)
class emp:
    def __init__(self,x,y,z):
        self.eno=x
        self.ename=y
        self.sal=z
    def display(self):
        print('employe number=',self.eno)
        print('employe name=',self.ename)
        print('employe salary=',self.sal)
t=emp(1998,'vineeth',10000000)
t.display()
(destructers in python):
(example-1):
class sample:
    def __init__(self):
        print('take a risk')
    def __del__(self):
        print('adventure life')
s=sample()
del s
____________inheritance_____________
(example-1):
class sample:
    def m1(self):
        print('never ever give up')
class test(sample):
    def m2(self):
        print('become a ceo')
c1=test()
c1.m1()
c1.m2()
___________multilevel inheritance___________
(example-1)
class a:
    def m1(self):
        print('never ever give up')
class b(a):
    def m2(self):
        print('become a ceo')
class c(b):
    def m3(self):
        print('be a real man')
c1=c()
c1.m1()
c1.m2()
c1.m3()
____________multiple inheritance______________
(example-1):
class addition:
    def add(self,x,y):
        print(x+y)
class subraction:
    def sub(self,m,n):
        print(m-n)
class multiplication:
    def mul(self,i,j):
        print(i*j)
class division:
    def div(self,a,b):
        print(a/b)
class calculator(addition,subraction,multiplication,division):
    def mod(self,p,q):
        print(p%q)
c1=calculator()
c1.add(8,9)
c1.sub(8,9)
c1.mul(8,9)
c1.div(8,9)
c1.mod(8,9)
_______________hierarichal inheritance__________________
(example-1)
class a:
    def m1(self):
        print('never ever give up')
class b(a):
    def m2(self):
        print('bring back past')
class c(a):
    def m3(self):
        print('bring love back')
class d(a):
    def m4(self):
        print('marry her')
b1=b()
b1.m1()
b1.m2()
 
c1=c()
c1.m1()
c1.m3()

d1=d()
d1.m1()
d1.m4()
___________hybrid inheritance__________
(example-1)
class a:
    def m1(self):
        print('never ever give up')
class b(a):
    def m2(self):
        print('bring back past')
class c(a):
    def m3(self):
        print('bring love back')
class d(b,c):
    def m4(self):
        print('marry her')
d1=d()
d1.m1()
d1.m2()
d1.m3()
d1.m4()
_______________________POLYMORPHISM_____________________________
(EXAMPLE-1):function based polymorphism
a=10
b=25
c=35
print(a)
print(a,b)
print(a,b,c)
print('take every second')
print('never ever give up'
______________________________________
(example-1):operator based polymorphism
a=10
b=20
print(a+b)
c=('vineeth')
d=('druthi')
print(c+d)
(example-2):
a=5
b=4
print(a*b)
c=('vineeth')
print(c*a)
print('druthi'*b)
________________________________
(example-1):class based polymorphism
class sample:
    def m1(self):
        print('never ever give up')
class test:
    def m2(self):
        print('bring love back')
s1=sample()
s1.m1()
t1=test()
t1.m2()
(example-1):this concept is called over riding or class based
class sample:
    def m1(self):
        print('get a seat in uk')
class test(sample):
    def m1(self):
        print('enjoy every movement')
t1=test()
t1.m1()
_____________________super()________________________-
(example-1):
class sample:
    def m1(self):
        print('get a seat in uk')
class test(sample):
    def m1(self):
        super().m1()
        print('enjoy every movement')
t1=test()
t1.m1()
____using constructor____
(example-1):single inheritance
class sample:
    def __int__(self):
        print('get a seat in uk')
class test(sample):
    def __init__(self):
        super().__init__()
        print('enjoy every movement')
t1=test()
(example-2):
class a:
    def __int__(self):
        print('get a seat in uk')
class b(a):
    def __init__(self):
        super().__init__()
        print('enjoy every movement')
class c(b):
    def __init__(self):
        super().__init__()
        print('help for every person')
c1=c()
(example-1):to demonstrate public,protected,private
class sample:
    a=10
    _b=20
    __c=30
    def display():
        print(sample.__c)
        print(sample.a)
        print(sample._b)
sample.display()
(example-2):
class myself:
    name='vineeth'
    _address='bhimavaram'
    _age=22
    __bnkblce=1000000
    __number=9553622229
    def display():
        print('bank balance=',myself.__bnkblce)
        print('number of person=',myself.__number)
        print('age of person=',myself._age)
        print('address of person=',myself._address)
        print('name of person=',myself.name)
myself.display()
